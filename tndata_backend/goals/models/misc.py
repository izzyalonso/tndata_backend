"""
Misc functions and utilities that are used by this app's models.

"""
from django.core.cache import cache
from django.db import connection

from .public import Action, Goal, Category


def _custom_triggers_allowed(user, user_object, timeout=90):
    """This function looks up all of a user's selected content IDs, storing
    them in a dict keyed by an object type. The idea is to check all of these
    against the user's Packages at once (which is expensive) and cache this
    for a period.

    That way we don't have to perform this operation for every UserCategory,
    UserGoal, UserAction selected by the user during serialization.

    """
    object_type = user_object.__class__.__name__.lower()
    cache_key = 'restricted-user-objects-{}'.format(user.id)
    restricted = cache.get(cache_key)
    if restricted is None:
        # All the packages with restricted triggers
        packages = user.packageenrollment_set.filter(prevent_custom_triggers=True)
        restricted_categories = packages.values_list('category_id', flat=True)
        restricted_goals = packages.values_list('goals__id', flat=True)

        # List of UserCategopry IDs that don't allow custom triggers
        qs = user.usercategory_set.filter(category__id__in=restricted_categories)
        restricted_user_categories = qs.values_list('id', flat=True)

        # List of UserGoal IDs that don't allow custom triggers
        qs = user.usergoal_set.filter(goal__id__in=restricted_goals)
        restricted_user_goals = qs.values_list('id', flat=True)

        # List of UserAction IDs that don't allow custom triggers
        qs = user.useraction_set.filter(action__goals__id__in=restricted_goals)
        restricted_user_actions = qs.values_list('id', flat=True)

        restricted = {
            'usercategory': restricted_user_categories,
            'usergoal': restricted_user_goals,
            'useraction': restricted_user_actions,
        }
        cache.set(cache_key, restricted, timeout=timeout)
    return user_object.id not in restricted[object_type]


# Convenience/Optimization functions
# ----------------------------------
# The following functions retrieve some specific data in a more efficient
# manner that using the default queries generated by the ORM.

def popular_actions(top=10):
    """Returns a list of [(title, count), ... ] tuples for popular Actions."""

    cursor = connection.cursor()
    query = """
select count(action_id) as aid_count, action_id
from goals_useraction group by action_id
order by aid_count desc
limit %s
"""
    cursor.execute(query, [top])
    results = cursor.fetchall()

    # split out the counts & action ids so we can look up the relevant titles
    counts = [t[0] for t in results]
    ids = [t[1] for t in results]
    titles = Action.objects.filter(id__in=ids).values_list('title', flat=True)
    return list(zip(titles, counts))


def popular_goals(top=10):
    """Returns a list of [(title, count), ... ] tuples for popular Goals."""

    cursor = connection.cursor()
    query = """
select count(goal_id) as gid_count, goal_id
from goals_usergoal group by goal_id
order by gid_count desc
limit %s
"""
    cursor.execute(query, [top])
    results = cursor.fetchall()

    # split out the counts & action ids so we can look up the relevant titles
    counts = [t[0] for t in results]
    ids = [t[1] for t in results]
    titles = Goal.objects.filter(id__in=ids).values_list('title', flat=True)
    return list(zip(titles, counts))


def popular_categories(top=10):
    """Returns a list of [(title, count), ... ] tuples for popular Categories."""

    cursor = connection.cursor()
    query = """
select count(category_id) as cid_count, category_id
from goals_usercategory group by category_id
order by cid_count desc
limit %s
"""
    cursor.execute(query, [top])
    results = cursor.fetchall()

    # split out the counts & action ids so we can look up the relevant titles
    counts = [t[0] for t in results]
    ids = [t[1] for t in results]
    titles = Category.objects.filter(id__in=ids).values_list('title', flat=True)
    return list(zip(titles, counts))
